#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

%require-our
%new-style

%requires UnitTest




our hash thash;
our int errors;
our hash o.verbose = True;
o.info = True;

UnitTest unit();


sub main() {
    *string connstr = shift ARGV;

    connstr = "sybase:test/testtest@SDELL";

    if (connstr !~ /^[a-z0-9_]+:/)
        connstr = "freetds:" + connstr;
    DatasourcePool ds(connstr);

    SQLStatement insert_stmt(ds);
    insert_stmt.prepare("insert into test values (%v, %v, %v, %v)");

    SQLStatement select_stmt(ds);
    select_stmt.prepare("select * from test");

    SQLStatement select_into_stmt(ds);
    select_into_stmt.prepare("select getdate() into :dt");

    SQLStatement select_err_stmt(ds);
    select_err_stmt.prepare("select * from blah");

    SQLStatement delete_stmt(ds);
    delete_stmt.prepare("delete from test");

    SQLStatement tsql(ds);
    tsql.prepare("create procedure get_count @count int output, @status varchar(80)
select count(1) into @count from user_objects where status = @status;
");

    create_table(ds);
    test1(insert_stmt, select_stmt);
    test3(select_err_stmt);
    test4(delete_stmt, select_stmt);
}


sub create_table(DatasourcePool dsp) {
    SQLStatement drop_stmt(dsp);
    drop_stmt.prepare("drop table test");

    on_exit drop_stmt.commit();

    try {
        drop_stmt.exec();
    }
    catch (hash ex) {
    }

    drop_stmt.prepare("create table test (dt datetime, d date, t time, sdt smalldatetime)");
    drop_stmt.exec();
}

sub test1(SQLStatement insert_stmt, SQLStatement select_stmt) {
    date now = now_us();

    binary bin = binary("hello");

    {
        code insert = sub () {
            insert_stmt.bind(now, now, now, now);

            insert_stmt.beginTransaction();
            on_success insert_stmt.commit();
            insert_stmt.exec();
            unit.cmp(insert_stmt.affectedRows(), 1, "affected rows after insert");
        };

        insert();

        now = now_us();
        insert();

        now = now_us();
        insert();

        now = now_us();
        insert();
    }

    on_exit select_stmt.commit();

    select_stmt.exec();
    int rows;
    while (select_stmt.next()) {
        ++rows;
        hash rv = select_stmt.fetchRow();
    }

    unit.cmp(rows, 4, "next and fetch");

    select_stmt.close();

    select_stmt.exec();
    any v = select_stmt.fetchRows(-1);
    unit.cmp(elements v, 4, "fetch rows");

    select_stmt.close();

    select_stmt.exec();
    v = select_stmt.fetchColumns(-1);
    unit.cmp(v.size(), 4, "fetch columns");

    select_stmt.exec();
    v = select_stmt.fetchColumns(-1);
    unit.cmp(v.size(), 4, "fetch columns 2");
}

sub test3(SQLStatement stmt) {
    try {
        stmt.beginTransaction();
        stmt.exec();
        unit.cmp(True, False, "first negative select");
    }
    catch (ex) {
        unit.cmp(True, True, "first negative select");
    }
    try {
        on_success stmt.commit();
        on_error stmt.rollback();
        any rv = stmt.fetchColumns(-1);
        unit.cmp(True, False, "second negative select");
    }
    catch (ex) {
        unit.cmp(True, True, "second negative select");
    }
}

sub test4(SQLStatement delete_stmt, SQLStatement select_stmt) {
    {
        delete_stmt.beginTransaction();
        on_success delete_stmt.commit();
        delete_stmt.exec();
        unit.cmp(4, delete_stmt.affectedRows(), "affected rows");
        delete_stmt.close();
    }

    select_stmt.exec();
    on_exit select_stmt.commit();
    any rv = select_stmt.fetchRows();
    unit.cmp(rv, (), "select after delete");
}

main();


