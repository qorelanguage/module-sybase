#!/usr/bin/env qore

%new-style

%requires QUnit

%exec-class SybaseStatementTest

const Numbers = (
    0: "zero",
    1: "one",
    2: "two",
    3: "three",
    4: "four"
);

public class SybaseStatementTest inherits QUnit::Test {
    private {
        DatasourcePool ds;
    }

    drop_test_tables() {
        SQLStatement stmt(ds);
        on_success stmt.commit();
        on_error stmt.rollback();

        stmt.prepare("drop table test");

        on_exit stmt.commit();

        try {
            stmt.exec();
        }
        catch (hash ex) {}
    }

    create_test_tables() {
        SQLStatement stmt(ds);
        on_success stmt.commit();
        on_error stmt.rollback();

        stmt.prepare("create table test (name varchar(40), number int)");
        stmt.exec();
    }

    setUp() {
    }

    tearDown() {
    }

    constructor() : Test("SybaseStatementTest", "1.0") {
        string connstr = getEnv("DB_SYBASE", "freetds:test/test@mssql");
        ds = new DatasourcePool(connstr);
        create_test_tables();

        on_exit
            drop_test_tables();

        addTestCase("insert values", \test_insert());
        addTestCase("select values", \test_stmt_eq_select());
        addTestCase("stmt select values", \test_stmt_eq_select());
        addTestCase("stmt error", \test_error());
        addTestCase("stmt fetch columns", \test_fetch_columns());
        addTestCase("delete rows", \test_delete());

        set_return_value(main());
    }

    test_insert() {
        SQLStatement stmt(ds);
        on_error stmt.rollback();

        stmt.prepare("insert into test values (%v, %v)");
        for (int i = 0; i < 5; i++) {
            stmt.exec(Numbers{i}, i);
            testAssertionValue("affected rows " + i, stmt.affectedRows(), 1);
        }
        stmt.commit();

        # uncomment to test reconnections - restart the server while waiting
        #printf("waiting 30s..."); flush(); sleep(30); print("\n");
    }

    test_select() {
        SQLStatement stmt(ds);
        on_error stmt.rollback();

        stmt.prepare("select name from test where number = %v");
        stmt.exec(3); # this should be canceled
        for (int i = 0; i < 5; i++) {
            stmt.exec(i);

            int cnt = 0;

            while (stmt.next()) {
                cnt++;
                hash row = stmt.fetchRow();
                testAssertionValue(sprintf("value %d-%d", i, $#), row.name, Numbers{i});
            }
            testAssertionValue("row count " + i, cnt, 1);
            testAssertionValue("affected rows " + i, stmt.affectedRows(), 1);
        }

        stmt.prepare("select * from test");
        stmt.exec();
        list rows = stmt.fetchRows();
        testAssertionValue("fetchRows", rows.size(), 5);

        for (int i = 0; i < rows.size(); i++) {
            int n = rows[i]{"number"};
            string s = rows[i]{"name"};
            testAssertionValue("fetchRows " + i, Numbers{n}, s);
        }

        stmt.exec();
        testAssertionValue("fetchRows size", stmt.fetchRows(2).size(), 2);
        stmt.commit();
    }

    test_stmt_eq_select() {
        # try all 3 methods for reading results
        # and check all the methods returns the
        # same result.

        string query = "select * from test";
        list res1 = ds.selectRows(query);
        SQLStatement stmt(ds);
        on_error stmt.rollback();

        stmt.prepare(query);
        list res2 = stmt.fetchRows();

        stmt.exec();
        testAssertionValue("fetchRows size 1", stmt.fetchRows(2).size(), 2);

        stmt.exec();
        testAssertionValue("fetchRows size 2", stmt.fetchRows(1).size(), 1);

        stmt.exec();
        testAssertionValue("fetchRows size 3", stmt.fetchRows(10).size(), 5);

        stmt.exec();
        testAssertionValue("fetchRows size 4", stmt.fetchRows(0).size(), 5);

        stmt.exec();
        testAssertionValue("fetchRows size 5", stmt.fetchRows(-1).size(), 5);

        stmt.prepare(query);
        list res3 = ();
        while (stmt.next()) {
            hash row = stmt.fetchRow();
            res3 += row;
        }

        # just to be sure, there should be 5 rows in the table
        testAssertionValue("select result size", res1.size(), 5);

        # all the results must be the same
        testAssertionValue("select result 1", res2, res1);
        testAssertionValue("select result 2", res3, res1);
        testAssertionValue("select result 3", res2, res3);

        stmt.commit();
    }

    test_delete() {
        string query = "delete from test";
        SQLStatement stmt(ds);
        on_error stmt.rollback();

        stmt.prepare(query);
        stmt.exec();
        testAssertionValue("affected rows 1", stmt.affectedRows(), 5);

        stmt.rollback();
        stmt.exec();
        testAssertionValue("affected rows 2", stmt.affectedRows(), 5);

        stmt.commit();
        stmt.exec();
        testAssertionValue("affected rows 3", stmt.affectedRows(), 0);

        stmt.commit();
    }

    test_error() {
        bool ok = True;
        on_exit ds.rollback();

        try {
            SQLStatement stmt(ds);
            stmt.prepare("select * from table_which_doesnt_exist");
            stmt.exec();
            ok = False;
            testAssertionValue("select error", 0, 1);
        } catch() {}

        testAssertionValue("select error 1", ok, True);

        try {
            SQLStatement stmt(ds);
            stmt.next();
            ok = False;
        } catch() {}

        testAssertionValue("select error 2", ok, True);

        SQLStatement stmt(ds);
        stmt.prepare("select * from test");
        while (stmt.next()) {
            stmt.fetchRow();
        }

        testAssertionValue("select error 3", stmt.fetchRow(), NOTHING);

        stmt.rollback();
    }

    test_fetch_columns() {
        string query = "select * from test";
        SQLStatement stmt(ds);
        on_exit stmt.rollback();

        stmt.prepare(query);
        hash res1 = stmt.fetchColumns(3);
        hash res2 = stmt.fetchColumns(3);

        testAssertionValue("fetch columns 1", res1.name.size(), 3);
        testAssertionValue("fetch columns 2", res2.number.size(), 2);

        testAssertionValue("fetch columns 3", res1.number.size(), 3);
        testAssertionValue("fetch columns 4", res2.name.size(), 2);

        hash h = res1;
        int idx = -1;
        for (int i = 0; i < 5; i++) {
            idx++;
            string name = Numbers{i};
            testAssertionValue("fetch columns 5-" + i, h.name[idx], name);

            if (i == 2) { h = res2; idx = -1; }
        }

        stmt.prepare(query);
        stmt.exec();
        h = stmt.fetchColumns(-1);
        testAssertionValue("fetch columns 6", h.name.size(), 5);

        stmt.commit();
    }
}
